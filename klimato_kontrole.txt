#include <Stepper.h>
#include <math.h>

float tv1, tv2, tk1, tk2;         		// vairuotojo ir keleivio temp
float norima_temp_vairuotojo, norima_temp_keleivio;  // Norimos salono temperaturos
float salono_vidurkis; 
const int ZingsiaiPer90 = 512;     // 90 lapisniu sklendes pasisukimas zingsniais
const int ZingsniaiPer180 = 1024;     // 180 lapisniu sklendes pasisukimas zingsniais
int zingsiai_per_pozicija_90 = ZingsiaiPer90/5;
int zingsiai_per_pozicija_180 = ZingsniaiPer180/10;

void Isjungimas();
void parametru_nuskaitymas();
void ventiliatoriaus_greitis();
int PozicijosApskaiciavimas(float temperatura, float norima_temperatura);
int Silto_Salto_Oro_PozicijosApskaiciavimas_Vairuotojui(float temperatura1, float temperatura2, float norima_temperatura);
int Silto_Salto_Oro_PozicijosApskaiciavimas_Keleiviui(float temperatura1, float temperatura2, float norima_temperatura);
void Motoras(Stepper motoras, int esamaPozicija, int norimaPozicija);   // 90 laipsniu sklendziu motoras

int On=0;       		// Klimato kontroles ijungimui/isjungimui
int esamaPozicija1=0;	// Vairuotojo virsaus skelnde
int esamaPozicija2=0;   // Vairuotojo apacios skelnde
int esamaPozicija3=0;   // Keleivio virsaus skelnde
int esamaPozicija4=0;   // Keleivio apacios skelnde
int esamaPozicija5=0;   // Silto oro sklende vairuotojo
int esamaPozicija6=0;   // Silto oro sklende keleivio


Stepper stepperName1 = Stepper(ZingsiaiPer90, 32, 36, 34, 38);   // Vairuotojo virsaus skelnde
Stepper stepperName2 = Stepper(ZingsiaiPer90, 42, 46, 44, 48);   // Vairuotojo apacios skelnde
Stepper stepperName3 = Stepper(ZingsiaiPer90, 50, 51, 52, 53);   // Keleivio virsaus skelnde
Stepper stepperName4 = Stepper(ZingsiaiPer90, 33, 37, 35, 39);   // Keleivio apacios skelnde
Stepper stepperName5 = Stepper(ZingsniaiPer180, 43, 47, 45, 49);   	  // Karsto/Salto oro sklende vairuotojo
Stepper stepperName6 = Stepper(ZingsniaiPer180, 22, 26, 24, 28);       // Karsto/Salto oro sklende keleivio

void setup()
{
  pinMode(3, OUTPUT);
  stepperName1.setSpeed(20);
  stepperName2.setSpeed(20);
  stepperName3.setSpeed(20);
  stepperName4.setSpeed(20);
  stepperName5.setSpeed(20);
  stepperName6.setSpeed(20); 
  Serial.begin(9600); 
}

void loop()
{
  parametru_nuskaitymas();
  
  if(On == 0)        // Jeigu isjungiama klimato kontrole
  {
	Isjungimas();
  }
  salono_vidurkis=(tv1+tv2+tk1+tk2)/4;
  ventiliatoriaus_greitis();
  
  int norimaPozicija1 = PozicijosApskaiciavimas(tv1, norima_temp_vairuotojo);   // Vairuotojo virsaus sklendes pozicijos apskaiciavimas
  int norimaPozicija2 = PozicijosApskaiciavimas(tv2, norima_temp_vairuotojo);   // Vairuotojo apacios sklendes pozicijos apskaiciavimas
  int norimaPozicija3 = PozicijosApskaiciavimas(tk1, norima_temp_keleivio);     // Keleivio virsaus sklendes pozicijos apskaiciavimas
  int norimaPozicija4 = PozicijosApskaiciavimas(tk2, norima_temp_keleivio);     // Keleivio apacios sklendes pozicijos apskaiciavimas
  int norimaPozicija5 = Silto_Salto_Oro_PozicijosApskaiciavimas_Vairuotojui(tv1, tv2, norima_temp_vairuotojo);     // Silto/Salto oro sklendes pozicijos apskaiciavimas vairuotojui
  int norimaPozicija6 = Silto_Salto_Oro_PozicijosApskaiciavimas_Keleiviui(tk1, tk2, norima_temp_keleivio);       // Silto/Salto oro sklendes pozicijos apskaiciavimas keleiviui
  
  
  Motoras(stepperName1, esamaPozicija1, norimaPozicija1, zingsiai_per_pozicija_90, "Vairuotojo virsaus sklende");
  Motoras(stepperName2, esamaPozicija2, norimaPozicija2, zingsiai_per_pozicija_90, "Vairuotojo apacios sklende");
  Motoras(stepperName3, esamaPozicija3, norimaPozicija3, zingsiai_per_pozicija_90, "Keleivio virsaus sklende");
  Motoras(stepperName4, esamaPozicija4, norimaPozicija4, zingsiai_per_pozicija_90, "Keleivio apacios sklende");
  Motoras(stepperName5, esamaPozicija5, norimaPozicija5, zingsiai_per_pozicija_180, "Vairuotojo Karsto/salto oro sklende");
  Motoras(stepperName6, esamaPozicija6, norimaPozicija6, zingsiai_per_pozicija_180, "Keleivio Karsto/salto oro sklende");
  
  
  esamaPozicija1 = norimaPozicija1;
  esamaPozicija2 = norimaPozicija2;
  esamaPozicija3 = norimaPozicija3;
  esamaPozicija4 = norimaPozicija4;
  esamaPozicija5 = norimaPozicija5;
  esamaPozicija6 = norimaPozicija6;
}

void parametru_nuskaitymas()
{
  if (Serial.available()) 
  {
    String command = Serial.readStringUntil(' ');
    if (command == "TV1") 
    {
      tv1 = Serial.parseInt();
    } 
    else if (command == "TV2") 
    {
      tv2 = Serial.parseInt();
    } 
    else if (command == "TK1") 
    {
      tk1 = Serial.parseInt();
    } 
    else if (command == "TK2") 
    {
      tk2 = Serial.parseInt();
    } 
    else if (command == "NV") 
    {
      norima_temp_vairuotojo = Serial.parseInt();
    }
	else if (command == "NK") 
    {
      norima_temp_keleivio = Serial.parseInt();
    }
	else if (command == "ON")
	{
      On = Serial.parseInt();
	  if(On>1)
	  {
	    On=1;
	  }
	}
  }
}

void ventiliatoriaus_greitis()
{
  float skirtumas1, skirtumas2, skirtumas;
  int greitis;
  
  skirtumas1=fabs(norima_temp_vairuotojo-salono_vidurkis);
  skirtumas2=fabs(norima_temp_keleivio-salono_vidurkis);
  
  if(skirtumas1>=skirtumas2)
  {
    skirtumas=skirtumas1;
  }
  else if(skirtumas2>=skirtumas1)
  {
    skirtumas=skirtumas2;
  }
  
  if(skirtumas>=10)
  {
    greitis=255;
  }
  else if(skirtumas >= 2 && skirtumas < 10)
  {
    greitis=(skirtumas/10)*255;
  }
  else
  {
	if(On == 1)
	{
	  greitis=255*0.2;
	}
	else if(On == 0)
	{
	  greitis=0;
	}
  }
  analogWrite(3, greitis);
}

int PozicijosApskaiciavimas(float temperatura, float norima_temperatura)      // Virsaus ir koju sklendziu pozicija
{
  float skirtumas = fabs(norima_temperatura-temperatura);
  if(On == 1)
  {
    if (skirtumas < 2) 
    {
      return 1;       // 20% Pradaryta sklende
    } 
    else if (skirtumas >= 2 && skirtumas < 4) 
    {
      return 2;       // 40% Pradaryta sklende
    } 
    else if (skirtumas >= 4 && skirtumas < 6) 
    {
      return 3;       // 60% Pradaryta sklende
    } 
    else if (skirtumas >= 6 && skirtumas < 8) 
    {
      return 4;       // 80% Pradaryta sklende
    } 
    else 
    {
      return 5;       // 100% Pradaryta sklende
    }
  }
  else
  {
	return 0;       // 0% Pradaryta sklende
  }
}

int Silto_Salto_Oro_PozicijosApskaiciavimas_Vairuotojui(float temperatura1, float temperatura2, float norima_temperatura)		// Silto ir salto oro sklendes pozicija
{
  float vidurkis = (temperatura1+temperatura2)/2;
  float skirtumas = norima_temperatura-vidurkis;
  if(On == 1)
  {
    if(skirtumas>0)
    {
	  if (skirtumas < 2) 
      {
        return -1;       // 20% Pradaryta sklende
      } 
      else if (skirtumas >= 2 && skirtumas < 4) 
      {
        return -2;       // 40% Pradaryta sklende
      } 
      else if (skirtumas >= 4 && skirtumas < 6) 
      {
        return -3;       // 60% Pradaryta sklende
      } 
      else if (skirtumas >= 6 && skirtumas < 8) 
      {
        return -4;       // 80% Pradaryta sklende
      } 
      else 
      {
        return -5;       // 100% Pradaryta sklende
      }
    }
    else if(skirtumas<0)
    {
	  if (skirtumas > -2) 
      {
        return 1;       // 20% Pradaryta sklende
      } 
      else if (skirtumas <= -2 && skirtumas > -4) 
      {
        return 2;       // 40% Pradaryta sklende
      } 
      else if (skirtumas <= -4 && skirtumas > -6) 
      {
        return 3;       // 60% Pradaryta sklende
      } 
      else if (skirtumas <= -6 && skirtumas > -8) 
      {
        return 4;       // 80% Pradaryta sklende
      } 
      else 
      {
        return 5;       // 100% Pradaryta sklende
      }
    }
	else if(skirtumas==0)
	{
	  return 0;
	}
  }
  else
  {
    return 0;
  }
}

int Silto_Salto_Oro_PozicijosApskaiciavimas_Keleiviui(float temperatura1, float temperatura2, float norima_temperatura)		// Silto ir salto oro sklendes pozicija
{
  float vidurkis = (temperatura1+temperatura2)/2;
  float skirtumas = norima_temperatura-vidurkis;
  if(On == 1)
  {
    if(skirtumas>0)
    {
	  if (skirtumas < 2) 
      {
        return 1;       // 20% Pradaryta sklende
      } 
      else if (skirtumas >= 2 && skirtumas < 4) 
      {
        return 2;       // 40% Pradaryta sklende
      } 
      else if (skirtumas >= 4 && skirtumas < 6) 
      {
        return 3;       // 60% Pradaryta sklende
      } 
      else if (skirtumas >= 6 && skirtumas < 8) 
      {
        return 4;       // 80% Pradaryta sklende
      } 
      else 
      {
        return 5;       // 100% Pradaryta sklende
      }
    }
    else if(skirtumas<0)
    {
	  if (skirtumas > -2) 
      {
        return -1;       // 20% Pradaryta sklende
      } 
      else if (skirtumas <= -2 && skirtumas > -4) 
      {
        return -2;       // 40% Pradaryta sklende
      } 
      else if (skirtumas <= -4 && skirtumas > -6) 
      {
        return -3;       // 60% Pradaryta sklende
      } 
      else if (skirtumas <= -6 && skirtumas > -8) 
      {
        return -4;       // 80% Pradaryta sklende
      } 
      else 
      {
        return -5;       // 100% Pradaryta sklende
      }
    }
	else if(skirtumas==0)
	{
	  return 0;
	}
  }
  else
  {
    return 0;
  }
}

void Motoras(Stepper motoras, int esamaPozicija, int norimaPozicija, int zingsniaiPerPozicija, char atspausdinimas[]) 
{
  if(norimaPozicija != esamaPozicija) // Patikrinama ar norima pozicija nelygi esamai
  {
    // Apskaiciuojamas zingsniu skaicius kad pakeisti sklendes pozicija
    int zingsniai;
    if (norimaPozicija > esamaPozicija) 
    {
      zingsniai = (norimaPozicija - esamaPozicija) * zingsniaiPerPozicija;
    } 
    else 
    {
      zingsniai = -1 * (esamaPozicija - norimaPozicija) * zingsniaiPerPozicija;
    }
	char Siuntimas[100];
    sprintf(Siuntimas, "%s, eina is %d i %d pozicija", atspausdinimas, esamaPozicija, norimaPozicija);
    Serial.println(Siuntimas); 
    motoras.step(zingsniai);
  }
}

void Isjungimas()
{
  tv1=0;
  tv2=0;
  tk1=0;
  tk2=0;
  norima_temp_vairuotojo=0;
  norima_temp_keleivio=0;
}